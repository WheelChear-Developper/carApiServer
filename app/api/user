from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from app.schemas.user import UserCreate, UserResponse
from app.db.session import get_db
from app.crud.user import get_user_by_username_or_email, create_user

router = APIRouter()

@router.post("/register/", response_model=UserResponse)
async def register_user(payload: UserCreate, db: AsyncSession = Depends(get_db)):
    """
    ユーザー登録API（メールとユーザー名の重複チェックあり）

    新しいユーザーを登録します。ユーザー名とメールアドレスが既に存在する場合はエラーを返します。
    パスワードは `bcrypt` により安全にハッシュ化されて保存されます。
    登録時にはAPIキー（UUID4形式）も自動発行されます。

    パラメータ（JSON形式）:
    {
      "username": "masato",
      "email": "masato@example.com",
      "password": "securepassword123"
    }

    レスポンス例:
    {
      "id": 1,
      "username": "masato",
      "email": "masato@example.com",
      "api_key": "f8d0c9ba-ae3e-4f83-91df-000000000000",
      "is_deleted": false,
      "created_at": "2025-04-04T12:34:56",
      "updated_at": "2025-04-04T12:34:56"
    }

    HTTPレスポンスコード:
    - 200: 登録成功
    - 400: username または email が既に使用されている
    - 422: 不正なデータ形式（メールアドレス不正など）
    - 500: 内部エラー（DB失敗など）
    """
    existing_user = await get_user_by_username_or_email(db, payload.username, payload.email)
    if existing_user:
        raise HTTPException(status_code=400, detail="Username or Email already exists")
    new_user = await create_user(db, payload)
    return new_user